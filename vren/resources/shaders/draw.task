#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_NV_mesh_shader : require
#extension GL_EXT_debug_printf : enable

#define THREADS_NUM 32

#include "common.glsl"

layout(local_size_x = THREADS_NUM, local_size_y = 1, local_size_z = 1) in;

layout(constant_id = 0) const bool k_occlusion_culling = false;

layout(push_constant) uniform PushConstants
{
    Camera camera;
};

layout(set = 2, binding = 3) buffer readonly MeshletBuffer
{
    Meshlet meshlets[];
};

layout(set = 2, binding = 4) buffer readonly InstancedMeshletBuffer
{
    InstancedMeshlet instanced_meshlets[];
};

layout(set = 2, binding = 5) buffer readonly InstanceBuffer
{
    MeshInstance instances[];
};

layout(set = 4, binding = 0) uniform sampler2D depth_buffer_pyramid;

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere. Michael Mara, Morgan McGuire. 2013
bool project_sphere(vec3 C, float r, out vec4 aabb) // C and r in camera space
{
    float m00 = camera.projection[0][0];
    float m11 = camera.projection[1][1];
    float m22 = camera.projection[2][2];
    float m32 = camera.projection[3][2];

    if (C.z + r < camera.z_near) // The sphere is entirely clipped by the near plane
    {
        //debugPrintfEXT("CLIPPED BY NEAR-PLANE: ID: %d, C.z: %.2f, r: %.2f, m22: %.2f, m32: %.2f\n", gl_GlobalInvocationID.x, C.z, r, m22, m32);
        return false; // The sphere is entirely clipped by the near plane
    }

    float k = sqrt(r * r - (camera.z_near - C.z) * (camera.z_near - C.z));

    // Consider XZ plane to find minX and maxX
    vec2 minx, maxx;

    vec2 cx = C.xz;
    float cxl = length(cx);
    float tx = sqrt(dot(cx, cx) - r * r);
    minx = mat2(tx, r, -r, tx) * (cx / cxl);
    maxx = mat2(tx, -r, r, tx) * (cx / cxl);

    // If (dot(cx, cx) - r * r) < 0 then tx is NaN, or if minx or maxx are behind the near plane, we use the intersections of the circle with the near plane
    if (isnan(tx) || minx.y < camera.z_near) minx = vec2(C.x - k, camera.z_near);
    if (isnan(tx) || maxx.y < camera.z_near) maxx = vec2(C.x + k, camera.z_near);

    // Consider YZ plane to find minY and maxY
    vec2 miny, maxy;

    vec2 cy = C.yz;
    float cyl = length(cy);
    float ty = sqrt(dot(cy, cy) - r * r);
    miny = mat2(ty, r, -r, ty) * (cy / cyl);
    maxy = mat2(ty, -r, r, ty) * (cy / cyl);

    if (isnan(ty) || miny.y < camera.z_near) miny = vec2(C.y - k, camera.z_near);
    if (isnan(ty) || maxy.y < camera.z_near) maxy = vec2(C.y + k, camera.z_near);

    // Apply the perspective and convert homogeneous coordinates to euclidean coordinates
    aabb = vec4(
        (minx.x * m00) / minx.y, // min_x
        (miny.x * m11) / miny.y, // min_y
        (maxx.x * m00) / maxx.y, // max_x
        (maxy.x * m11) / maxy.y  // max_y
    );

    // TODO WHEN THE USER IS INSIDE THE SPHERE EVERYTHING BECOMES VERY VERY VERY WRONG

    if (aabb.x > aabb.z || aabb.y > aabb.w || isnan(aabb.x) || isnan(aabb.y) || isnan(aabb.z) || isnan(aabb.w)) {
       //debugPrintfEXT("INVALID SITUATION -> ID: %d, C: %.2v3f, aabb min: %.2v2f, aabb max: %.2v2f\n", gl_GlobalInvocationID.x, (camera.projection * vec4(C, 1)).xyz, aabb.xy, aabb.zw);
    }

    // Convert the AABB to UV space
    aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f);

    return true;
}

out taskNV TaskData
{
    uint instanced_meshlet_indices[THREADS_NUM];
} o_task;

shared uint s_meshlet_instances_count;

vec3 get_scale(mat4 transform)
{
    return vec3(
        length(transform[0]),
        length(transform[1]),
        length(transform[2])
    );
}

void main()
{
    if (gl_LocalInvocationIndex == 0)
    {
        s_meshlet_instances_count = 0;
    }

    barrier();

    if (gl_GlobalInvocationID.x < instanced_meshlets.length())
    {
        uint instanced_meshlet_idx = gl_GlobalInvocationID.x;

        InstancedMeshlet instanced_meshlet = instanced_meshlets[instanced_meshlet_idx];
        Meshlet meshlet = meshlets[instanced_meshlet.meshlet_idx];
        MeshInstance instance = instances[instanced_meshlet.instance_idx];

        Sphere sphere = meshlet.bounding_sphere;

        bool visible = true;

        if (k_occlusion_culling)
        {
            vec4 aabb;

            mat4 MV = camera.view * instance.transform;

            // The center of the sphere in camera space
            vec3 center = (MV * vec4(sphere.center, 1)).xyz;

            // The radius of the sphere is scaled by the maximum of the scale along the XYZ of the MV matrix
            float max_scale = max(length(MV[0]), max(length(MV[1]), length(MV[2])));
            float radius = sphere.radius * max_scale;

            if (project_sphere(center, radius, aabb))
            {
                ivec2 depth_buffer_pyramid_base_size = textureSize(depth_buffer_pyramid, 0);

                float width = (aabb.z - aabb.x) * depth_buffer_pyramid_base_size.x;
                float height = (aabb.w - aabb.y) * depth_buffer_pyramid_base_size.y;

                float level = floor(log2(max(width, height)));

                // Retrieve the farthest Z coordinate in the AABB containing the projected sphere
                vec2 tex_coord = (aabb.xy + aabb.zw) * 0.5;

                // Sampler will do max reduction so it'll compute the maximum of a 2x2 texel quad
                float depth = textureLod(depth_buffer_pyramid, tex_coord, level).x;

                // Project the Z coordinate of the nearest sphere point, which is the one lying in the vector that link the camera origin to the sphere center
                float m22 = camera.projection[2][2];
                float m32 = camera.projection[3][2];

                float nearest_depth = (center.z - radius) < camera.z_near ? -INF : ((center.z - radius) * m22 + m32) / (center.z - radius);

                // If the nearest sphere point is closer than the farthest point in the area, then we need to draw the sphere's content
                visible = nearest_depth < depth;

                if (!visible)
                {
                    //debugPrintfEXT("ID %d occluded - center: %.3f, radius: %.3f, nearest depth: %.3f < depth: %.3f, level: %.3f (%.2v2f), tex_coord: %.2v2f\n", gl_GlobalInvocationID.x, center.z, radius, nearest_depth, depth, level, tex_coord, vec2(width, height));
                }
            }
            else
            {
                visible = false;
            }
        }

        if (visible)
        {
            uint pos = atomicAdd(s_meshlet_instances_count, 1);
            o_task.instanced_meshlet_indices[pos] = instanced_meshlet_idx;
        }
    }

    barrier();

    if (gl_LocalInvocationIndex == 0)
    {
        gl_TaskCountNV = s_meshlet_instances_count;
    }
}
