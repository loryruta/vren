#version 460

#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_arithmetic : require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

#define MAX_ITERS 4
#define NUM_ITEMS (gl_WorkGroupSize.x * MAX_ITERS) 

#define RADIX_BITS 4
#define RADIX      uint(exp2(RADIX_BITS))
#define RADIX_MASK (RADIX - 1)

layout(push_constant) uniform PushConstants
{
    uint position;
};

layout(set = 0, binding = 0) buffer InputBuffer
{
	uint array[];
};

layout(set = 0, binding = 0) buffer LocalCountBuffer
{
	uint counts[];
};

void main()
{
	uint local_counts[RADIX];

	for (uint i = 0; i < RADIX; i++)
	{
		local_counts[i] = 0;
	}

	for (uint i = gl_GlobalInvocationID.x * MAX_ITERS; i < (gl_GlobalInvocationID.x + 1) * MAX_ITERS; i++)
	{
		if (i < array.length())
		{
            uint symbol = array[i] >> (position * RADIX_BITS) & RADIX_MASK;

			for (uint j = 0; j < RADIX; j++)
			{
				local_counts[j] += subgroupAdd(symbol == j ? 1 : 0);
			}
		}
	}

	if (subgroupElect())
	{
		for (uint j = 0; j < RADIX; j++)
		{
			counts[gl_WorkGroupID.x * RADIX] = local_counts[j]; 
		}
	}
}
