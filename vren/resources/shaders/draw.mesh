#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_NV_mesh_shader : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_16bit_storage : require

#define ITERATIONS_NUM 16
#define THREADS_NUM 32
#define MAX_VERTICES_NUM 64
#define MAX_PRIMITIVES_NUM 124

#if (THREADS_NUM * ITERATIONS_NUM < MAX_VERTICES_NUM) || (THREADS_NUM * ITERATIONS_NUM < MAX_PRIMITIVES_NUM * 3)
#   error "Invalid threads/iterations number (not sufficient to output all vertices/indices)"
#endif

#include <common.glsl>

layout(local_size_x = THREADS_NUM, local_size_y = 1, local_size_z = 1) in;

layout(triangles, max_vertices = MAX_VERTICES_NUM, max_primitives = MAX_PRIMITIVES_NUM) out;

layout(push_constant) uniform PushConstants
{
    Camera camera;
};

layout(set = 2, binding = 0) buffer readonly VertexBuffer
{
    Vertex vertices[];
};

layout(set = 2, binding = 1) buffer readonly MeshletVertexBuffer
{
    uint meshlet_vertices[];
};

layout(set = 2, binding = 2) buffer readonly MeshletTriangleBuffer
{
    uint8_t meshlet_triangles[];
};

layout(set = 2, binding = 3) buffer readonly MeshletBuffer
{
    Meshlet meshlets[];
};

layout(set = 2, binding = 4) buffer readonly InstancedMeshletBuffer
{
    InstancedMeshlet instanced_meshlets[];
};

layout(set = 2, binding = 5) buffer readonly MeshInstanceBuffer
{
    MeshInstance mesh_instances[];
};

in taskNV TaskData
{
    uint instanced_meshlet_indices[32];
} i_task;

layout(location = 0) out vec3 o_position[];
layout(location = 1) out vec3 o_normal[];
layout(location = 2) out vec2 o_texcoord[];
layout(location = 3) out flat uint o_material_idx[];

uint hash(uint a)
{
    a = (a+0x7ED55D16u) + (a<<12);
    a = (a^0xC761C23Cu) ^ (a>>19);
    a = (a+0x165667B1u) + (a<<5);
    a = (a+0xD3A2646Cu) ^ (a<<9);
    a = (a+0xFD7046C5u) + (a<<3);
    a = (a^0xB55A4F09u) ^ (a>>16);
    return a;
}

void main()
{
    uint instanced_meshlet_idx = i_task.instanced_meshlet_indices[gl_WorkGroupID.x];

    InstancedMeshlet instanced_meshlet = instanced_meshlets[instanced_meshlet_idx];
    Meshlet meshlet = meshlets[instanced_meshlet.meshlet_idx];
    MeshInstance mesh_instance = mesh_instances[instanced_meshlet.instance_idx];

    for (uint i = gl_LocalInvocationIndex * ITERATIONS_NUM; i < (gl_LocalInvocationIndex + 1) * ITERATIONS_NUM; i++)
    {
        if (i < meshlet.vertex_count)
        {
            Vertex vertex = vertices[meshlet_vertices[meshlet.vertex_offset + i]];

            vec4 world_position = mesh_instance.transform * vec4(vertex.position, 1.0);
            gl_MeshVerticesNV[i].gl_Position = camera.projection * camera.view * world_position;

            o_position[i] = world_position.xyz;
            o_normal[i] = vertex.normal;
            o_texcoord[i] = vertex.texcoord;
            o_material_idx[i] = instanced_meshlet.material_idx;
        }
    }

    for (uint i = gl_LocalInvocationIndex * ITERATIONS_NUM; i < (gl_LocalInvocationIndex + 1) * ITERATIONS_NUM; i++)
    {
        if (i < meshlet.triangle_count * 3)
        {
            gl_PrimitiveIndicesNV[i] = uint(meshlet_triangles[meshlet.triangle_offset + i]);
        }
    }

    if (gl_LocalInvocationIndex == 0)
    {
        gl_PrimitiveCountNV = meshlet.triangle_count;
    }
}
