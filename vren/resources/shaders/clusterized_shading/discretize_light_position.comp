#version 460

#extension GL_KHR_vulkan_glsl : require
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

#include "common.glsl"

layout(set = 0, binding = 0) readonly buffer LightMinMaxBuffer
{
	vec3 aabb_min; float _pad;
	vec3 aabb_max;
};

layout(set = 0, binding = 1) readonly buffer PointLightBuffer
{
	PointLight point_lights[];
};

layout(set = 0, binding = 2) writeonly buffer MortonCodeBuffer
{
	uvec2 morton_codes[];
};

void main()
{
	if (gl_GlobalInvocationID.x < point_lights.length())
	{
		vec3 pos = point_lights[gl_GlobalInvocationID.x].position;
		
		uvec3 discretized_pos = uvec3(floor((pos - aabb_min) / (aabb_max - aabb_min) * (1 << 5)));

		uint morton_code = 0;
		for (uint i = 0; i < 16; i++)
		{
			morton_code |= ((discretized_pos.x >> i) & 1) << (i * 3);
			morton_code |= ((discretized_pos.y >> i) & 1) << (i * 3 + 1);
			morton_code |= ((discretized_pos.z >> i) & 1) << (i * 3 + 2);
		}

		morton_codes[gl_GlobalInvocationID.x] = uvec2(morton_code, gl_GlobalInvocationID.x);
	}
}
