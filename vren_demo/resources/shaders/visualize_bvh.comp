#version 460

#extension GL_GOOGLE_include_directive : require

#extension GL_EXT_debug_printf : enable

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

#include <common.glsl>

layout(push_constant) uniform PushConstants
{
    uint node_offset;
    uint node_count;
    uint color;
};

struct BvhNode
{
	vec3 _min; uint next;
	vec3 _max; uint _pad;
};

#define VREN_BVH_LEAF_NODE 0xFFFFFFFFu
#define VREN_BVH_INVALID_NODE 0xFFFFFFFEu

layout(set = 0, binding = 0) readonly buffer BvhBuffer
{
    BvhNode bvh[];
};

layout(set = 0, binding = 1) writeonly buffer DebugDrawBuffer
{
    DebugDrawBufferVertex vertices[];
};

#define VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, _from, _to, _color) \
    _buffer[_offset].position = _from; \
    _buffer[_offset].color = _color; \
    \
    _buffer[_offset + 1].position = _to; \
    _buffer[_offset + 1].color = _color; \
    \
    _offset += 2;

#define VREN_WRITE_DEBUG_DRAW_BUFFER_AABB(_buffer, _offset, _m, _M, _color) \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, _m, vec3(_M.x, _m.y, _m.z), _color); \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_M.x, _m.y, _m.z), vec3(_M.x, _m.y, _M.z), _color); \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_M.x, _m.y, _M.z), vec3(_m.x, _m.y, _M.z), _color); \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_m.x, _m.y, _M.z), _m, _color); \
    \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_m.x, _M.y, _m.z), vec3(_M.x, _M.y, _m.z), _color); \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_M.x, _M.y, _m.z), vec3(_M.x, _M.y, _M.z), _color); \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_M.x, _M.y, _M.z), vec3(_m.x, _M.y, _M.z), _color); \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_m.x, _M.y, _M.z), vec3(_m.x, _M.y, _m.z), _color); \
    \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_m.x, _m.y, _m.z), vec3(_m.x, _M.y, _m.z), _color); \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_M.x, _m.y, _m.z), vec3(_M.x, _M.y, _m.z), _color); \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_M.x, _m.y, _M.z), vec3(_M.x, _M.y, _M.z), _color); \
    VREN_WRITE_DEBUG_DRAW_BUFFER_LINE(_buffer, _offset, vec3(_m.x, _m.y, _M.z), vec3(_m.x, _M.y, _M.z), _color);

void main()
{
    if (gl_GlobalInvocationID.x < node_count)
    {
        uint node_idx = gl_GlobalInvocationID.x + node_offset;
        BvhNode node = bvh[node_idx];
  
        uint offset = node_idx * 12 * 2;
        if (node.next != VREN_BVH_INVALID_NODE)
        {
            VREN_WRITE_DEBUG_DRAW_BUFFER_AABB(vertices, offset, node._min, node._max, color);
        }
        else
        {
            VREN_WRITE_DEBUG_DRAW_BUFFER_AABB(vertices, offset, vec3(0), vec3(0), 0x000000);
        }
    }
}
