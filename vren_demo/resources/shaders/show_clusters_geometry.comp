#version 460

#extension GL_GOOGLE_include_directive : require

#extension GL_EXT_debug_printf : enable

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

#include <common.glsl>
#include <debug.glsl>
#include <clustered_shading.glsl>

layout(push_constant) uniform PushConstants
{
	uvec2 num_tiles;
	float camera_near;
	float camera_half_fov;
	mat4 camera_proj;
	mat4 camera_view;
} push_constants;

layout(set = 0, binding = 0) readonly buffer UniqueClusterKeyBuffer
{
	uint cluster_keys[];
};

layout(set = 0, binding = 1) readonly buffer ClusterKeyDispatchParams
{
	uvec4 cluster_key_dispatch_params;
};

layout(set = 0, binding = 2) writeonly buffer DebugDrawBuffer
{
    DebugDrawBufferVertex debug_draw_buffer[];
};

uint triple32(uint x)
{
    x ^= x >> 17;
    x *= 0xed5ad4bbU;
    x ^= x >> 11;
    x *= 0xac4c1b51U;
    x ^= x >> 15;
    x *= 0x31848babU;
    x ^= x >> 14;
    return x;
}

float hash(uint x)
{
    return float(triple32(x)) / float(0xffffffffU);
}

void main()
{
	if (gl_GlobalInvocationID.x < cluster_key_dispatch_params.w)
	{
		uint cluster_key = cluster_keys[gl_GlobalInvocationID.x];

		uvec3 cluster_ijk;
		uint cluster_normal_idx;
		clustered_shading_decode_cluster_key(cluster_key, cluster_ijk, cluster_normal_idx);

		vec4 cluster_min, cluster_max;
		clustered_shading_calc_cluster_aabb(
			cluster_ijk,
			push_constants.num_tiles,
			push_constants.camera_near,
			push_constants.camera_half_fov,
			push_constants.camera_proj,
			push_constants.camera_view,
			cluster_min,
			cluster_max
		);

		vec3 cluster_pos = ((cluster_min + cluster_max) / 2.0).xyz;

		vec3 cluster_normal;
		
		uvec3 decoded_normal_idx = clustered_shading_decode_normal_idx(cluster_normal_idx);

		uint face_idx = decoded_normal_idx.x;

		uint face_axis = face_idx % 3;
		uint u_component = (face_axis + 1) % 3;
		uint v_component = (face_axis + 2) % 3;

		float face_sign = (face_idx / 3) == 1 ? 1.0 : -1.0;
		uvec2 uv = decoded_normal_idx.yz;

		cluster_normal[face_axis] = face_sign;
		cluster_normal[u_component] = ((uv.x + 0.5) / 3.0) * 2.0 - 1.0;
		cluster_normal[v_component] = ((uv.y + 0.5) / 3.0) * 2.0 - 1.0;

		cluster_normal = normalize(cluster_normal);

		uint color = triple32(gl_GlobalInvocationID.x);

		// Write draw buffer
		uint draw_buffer_offset = gl_GlobalInvocationID.x * (VREN_DEBUG_AABB_VERTICES_COUNT + VREN_DEBUG_ARROW_VERTICES_COUNT);
	
		VREN_DEBUG_WRITE_AABB(debug_draw_buffer, draw_buffer_offset, cluster_min, cluster_max, cluster_normal_idx < 0x3F ? 0xFFFFFF : 0); // AABB

		if (cluster_normal_idx < 0x3F)
		{
			vec3 line_to = cluster_pos + cluster_normal * 0.01;
			VREN_DEBUG_WRITE_ARROW(debug_draw_buffer, draw_buffer_offset, cluster_pos, line_to, 0x00FF00, 0xFF0000); // Normal
		}
		else
		{
			VREN_DEBUG_WRITE_ARROW(debug_draw_buffer, draw_buffer_offset, cluster_pos, cluster_pos, 0x00FF00, 0xFF0000);
		}
	}
}
