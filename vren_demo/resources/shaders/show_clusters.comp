#version 460

#extension GL_GOOGLE_include_directive : require

#extension GL_EXT_debug_printf : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include <common.glsl>
#include <vren.glsl>
#include <clustered_shading.glsl>

#define VREN_DEMO_MODE_SHOW_CLUSTERS_KEY 0
#define VREN_DEMO_MODE_SHOW_CLUSTERS_IJK 1
#define VREN_DEMO_MODE_SHOW_CLUSTERS_NORMAL 2
#define VREN_DEMO_MODE_SHOW_CLUSTERS_LIGHT_ASSIGNMENT_COUNTS 3
#define VREN_DEMO_MODE_SHOW_CLUSTERS_LIGHT_ASSIGNMENT_OFFSETS 4
#define VREN_DEMO_MODE_SHOW_CLUSTERS_LIGHT_ASSIGNMENT_INDICES 5

layout(push_constant) uniform PushConstants
{
	int mode;
	uvec2 num_tiles;
	float _pad;
};

layout(set = 0, binding = 0, r32ui) uniform uimage2D u_cluster_references;

layout(set = 0, binding = 1) readonly buffer UniqueClusterKeyBuffer
{
	uint cluster_keys[];
};

layout(set = 0, binding = 2) readonly buffer AssignedLightCountsBuffer
{
	uint assigned_light_counts[];
};

layout(set = 0, binding = 3) readonly buffer AssignedLightOffsetsBuffer
{
	uint assigned_light_offsets[];
};

layout(set = 0, binding = 4) readonly buffer AssignedLightIndicesBuffer
{
	uint assigned_light_indices[];
};

layout(set = 0, binding = 5, rgba32f) uniform image2D u_output;

uint triple32(uint x)
{
    x ^= x >> 17;
    x *= 0xed5ad4bbU;
    x ^= x >> 11;
    x *= 0xac4c1b51U;
    x ^= x >> 15;
    x *= 0x31848babU;
    x ^= x >> 14;
    return x;
}

float hash(uint x)
{
    return float(triple32(x)) / float(0xffffffffU);
}

void main()
{
	ivec2 image_size = imageSize(u_output);
	if (gl_GlobalInvocationID.x < image_size.x && gl_GlobalInvocationID.y < image_size.y)
	{
		uint cluster_key_idx = imageLoad(u_cluster_references, ivec2(gl_GlobalInvocationID.xy)).r;
		uint cluster_key = cluster_keys[cluster_key_idx];
		
		uvec3 cluster_ijk;
		uint cluster_normal_idx;
		clustered_shading_decode_cluster_key(cluster_key, cluster_ijk, cluster_normal_idx);

		vec3 color;
		if (mode == VREN_DEMO_MODE_SHOW_CLUSTERS_KEY)
		{
			color = vec3(hash(cluster_key));
		}
		else if (mode == VREN_DEMO_MODE_SHOW_CLUSTERS_IJK)
		{
			color = vec3(
				cluster_ijk.xy / vec2(num_tiles),
				cluster_ijk.z / float(1024)
			);
		}
		else if (mode == VREN_DEMO_MODE_SHOW_CLUSTERS_NORMAL)
		{
			uvec3 decoded_normal_idx = clustered_shading_decode_normal_idx(cluster_normal_idx);
			color = vec3(
				decoded_normal_idx.x / 6.0,
				decoded_normal_idx.y / 3.0,
				decoded_normal_idx.z / 3.0
			);
		}
		else if (mode == VREN_DEMO_MODE_SHOW_CLUSTERS_LIGHT_ASSIGNMENT_COUNTS)
		{
			color = vec3(min(assigned_light_counts[cluster_key_idx] / 64.0, 1));
		}
		else if (mode == VREN_DEMO_MODE_SHOW_CLUSTERS_LIGHT_ASSIGNMENT_OFFSETS)
		{
			color = vec3(hash(assigned_light_offsets[cluster_key_idx]));
		}
		else if (mode == VREN_DEMO_MODE_SHOW_CLUSTERS_LIGHT_ASSIGNMENT_INDICES)
		{
			uint _hash = 0;
			for (uint i = 0; i < assigned_light_counts[cluster_key_idx]; i++)
			{
				uint point_light_idx = assigned_light_indices[assigned_light_offsets[cluster_key_idx] + i];
				_hash ^= point_light_idx;
			}
			color = vec3(hash(_hash));
		}
		else
		{
			color = vec3(1.0, 0, 0);
		}

		imageStore(u_output, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
	}
}
